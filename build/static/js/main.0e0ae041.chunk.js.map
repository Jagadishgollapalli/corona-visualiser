{"version":3,"sources":["components/Cards/Cards.module.css","App.Module.css","components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","components/Cards/Cards.jsx","images/image.png","App.js","reportWebVitals.js","index.js"],"names":["module","exports","url","fetchData","country","a","changeableUrl","axios","get","data","confirmed","recovered","deaths","lastUpdate","console","log","fetchDailyData","modifiedData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","Chart","useState","setDailyData","useEffect","fetchApi","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","value","options","legend","display","title","text","className","styles","container","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","fetchAPI","FormControl","NativeSelect","defaultValue","onChange","e","target","i","Cards","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","duration","seperator","Date","toDateString","App","state","fetchedData","setState","this","Image","src","coronaImage","alt","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0e0ae041.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__Xv-LN\",\"infected\":\"Cards_infected__1Xk66\",\"recovered\":\"Cards_recovered__1--Mp\",\"deaths\":\"Cards_deaths__1Mr8C\",\"card\":\"Cards_card__1gKF7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"olWIA_FY45scwaV9hJAUr\",\"image\":\"iooolvwSs4RI4d_SBR9de\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__Dc6eu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__2aAfM\"};","//fetching data through axios\r\nimport axios from \"axios\";\r\n\r\nconst url = \"https://covid19.mathdro.id/api\";\r\n//fetch data\r\n\r\nexport const fetchData = async (country) => {\r\n  let changeableUrl = url;\r\n  if (country) {\r\n    changeableUrl = `${url}/countries/${country}`;\r\n  }\r\n  try {\r\n    const {\r\n      data: { confirmed, recovered, deaths, lastUpdate },\r\n    } = await axios.get(changeableUrl); //we dont need all the things\r\n    //only we need a particular data so,{data} --destrutcing\r\n\r\n    // confirmed: data.confirmed,\r\n    // recovered:data.recoverd,\r\n    // deaths: data.deaths,\r\n    // lastUpdate:data.lastUpdate,\r\n    //as we desturcture the data we can destructure the properties also\r\n\r\n    return { confirmed, recovered, deaths, lastUpdate };\r\n\r\n    // console.log(response)\r\n  } catch (err) {\r\n    console.log(err);\r\n  }\r\n};\r\nexport const fetchDailyData = async () => {\r\n  try {\r\n    //to get the daily date\r\n    const { data } = await axios.get(`${url}/daily`);\r\n    // call this function inside chart\r\n    const modifiedData = data.map((dailyData) => ({\r\n      confirmed: dailyData.confirmed.total,\r\n      deaths: dailyData.deaths.total,\r\n      date: dailyData.reportDate,\r\n    }));\r\n    return modifiedData;\r\n  } catch (err) {}\r\n};\r\nexport const fetchCountries = async () => {\r\n  try {\r\n    const {\r\n      data: { countries },\r\n    } = await axios.get(`${url}/countries`);\r\n    return countries.map((country) => country.name);\r\n  } catch (err) {\r\n    console.log(err);\r\n  }\r\n};\r\n// import axios from \"axios\";\r\n\r\n// const url = \"https://covid19.mathdro.id/api\";\r\n\r\n// export const fetchData = async (country) => {\r\n//   let changeableUrl = url;\r\n\r\n//   if (country) {\r\n//     changeableUrl = `${url}/countries/${country}`;\r\n//   }\r\n\r\n//   try {\r\n//     const {\r\n//       data: { confirmed, recovered, deaths, lastUpdate },\r\n//     } = await axios.get(changeableUrl);\r\n\r\n//     return { confirmed, recovered, deaths, lastUpdate };\r\n//   } catch (error) {\r\n//     return error;\r\n//   }\r\n// };\r\n\r\n// // export const fetchDailyData = async () => {\r\n// //   try {\r\n// //     const { data } = await axios.get(`${url}/daily`);\r\n\r\n// //     return data.map(({ confirmed, deaths, reportDate: date }) => ({ confirmed: confirmed.total, deaths: deaths.total, date }));\r\n// //   } catch (error) {\r\n// //     return error;\r\n// //   }\r\n// // };\r\n\r\n// // Instead of Global, it fetches the daily data for the US\r\n// export const fetchDailyData = async () => {\r\n//   try {\r\n//     const { data } = await axios.get(\r\n//       \"https://api.covidtracking.com/v1/us/daily.json\"\r\n//     );\r\n\r\n//     return data.map(({ positive, recovered, death, dateChecked: date }) => ({\r\n//       confirmed: positive,\r\n//       recovered,\r\n//       deaths: death,\r\n//       date,\r\n//     }));\r\n//   } catch (error) {\r\n//     return error;\r\n//   }\r\n// };\r\n\r\n// export const fetchCountries = async () => {\r\n//   try {\r\n//     const {\r\n//       data: { countries },\r\n//     } = await axios.get(`${url}/countries`);\r\n\r\n//     return countries.map((country) => country.name);\r\n//   } catch (error) {\r\n//     return error;\r\n//   }\r\n// };","import React, { useState, useEffect } from \"react\";\r\nimport { fetchDailyData } from \"../../api\";\r\nimport { Line, Bar } from \"react-chartjs-2\";\r\nimport styles from \"./Chart.module.css\";\r\nconst Chart = ({ data, country }) => {\r\n  const [dailyData, setDailyData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchApi = async () => {\r\n      setDailyData(await fetchDailyData());\r\n    };\r\n\r\n    fetchApi();\r\n  }, []);\r\n  const lineChart =\r\n    //cannot read value 0 of undefined\r\n    dailyData.length !== 0 ? (\r\n      <Line\r\n        data={{\r\n          labels: dailyData.map(({ date }) => date),\r\n          datasets: [\r\n            {\r\n              data: dailyData.map(({ confirmed }) => confirmed),\r\n              label: \"Infected\",\r\n              borderColor: \"#3333ff\",\r\n\r\n              fill: true,\r\n            },\r\n            {\r\n              data: dailyData.map(({ deaths }) => deaths),\r\n              label: \"Deaths\",\r\n              borderColor: \"red\",\r\n              backgroundColor: \"rgba(255,0,0,0.5)\",\r\n              fill: true,\r\n            },\r\n          ],\r\n        }}\r\n      />\r\n    ) : null;\r\n  console.log(data.confirmed, data.recovered, data.deaths);\r\n  const barChart = data.confirmed ? (\r\n    <Bar\r\n      data={{\r\n        labels: [\"Infected\", \"Recovered\", \"Deaths\"],\r\n        datasets: [\r\n          {\r\n            label: \"People\",\r\n            backgroundColor: [\r\n              \"rgba(0, 0, 255, 0.5)\",\r\n              \"rgba(0, 255, 0, 0.5)\",\r\n              \"rgba(255, 0, 0, 0.5)\",\r\n            ],\r\n            data: [\r\n              data.confirmed.value,\r\n              data.recovered.value,\r\n              data.deaths.value,\r\n            ],\r\n          },\r\n        ],\r\n      }}\r\n      options={{\r\n        legend: { display: false },\r\n        title: { display: true, text: `current state in ${country}` },\r\n      }}\r\n    />\r\n  ) : null;\r\n  return (\r\n    <div className={styles.container}>{country ? barChart : lineChart}</div>\r\n  );\r\n};\r\nexport default Chart;","import React, { useState, useEffect } from \"react\";\r\nimport { NativeSelect, FormControl } from \"@material-ui/core\";\r\nimport styles from \"./CountryPicker.module.css\";\r\nimport { fetchCountries } from \"../../api\";\r\nconst CountryPicker = ({ handleCountryChange }) => {\r\n  const [fetchedCountries, setFetchedCountries] = useState([]);\r\n  useEffect(() => {\r\n    const fetchAPI = async () => {\r\n      setFetchedCountries(await fetchCountries());\r\n    };\r\n    fetchAPI();\r\n  }, [setFetchedCountries]); //setFetchedCountries ---> going to enable to pick diff countries\r\n\r\n  return (\r\n    <FormControl className={styles.FormControl}>\r\n      <NativeSelect\r\n        defaultValue=\"\"\r\n        onChange={(e) => handleCountryChange(e.target.value)}\r\n      >\r\n        <option value=\"\">Global</option>\r\n        {fetchedCountries.map((country, i) => (\r\n          <option key={i} value={country}>\r\n            {country}\r\n          </option>\r\n        ))}\r\n      </NativeSelect>\r\n    </FormControl>\r\n  );\r\n};\r\nexport default CountryPicker;","import React from \"react\";\r\n//impoorting from material ui\r\nimport { Card, CardContent, Typography, Grid } from \"@material-ui/core\";\r\n//for animation\r\nimport CountUp from \"react-countup\";\r\n//to do multiple styles\r\nimport cx from \"classnames\";\r\nimport styles from \"./Cards.module.css\";\r\n// we have passed like props i.e.., data in app.js so mention data\r\n\r\nconst Cards = ({ data: { confirmed, recovered, deaths, lastUpdate } }) => {\r\n  //cannot read value of undefined error solution\r\n  if (!confirmed) {\r\n    return \"loading....\";\r\n  }\r\n  //we are using material ui-core !!\r\n  return (\r\n    <div className={styles.container}>\r\n      <Grid container spacing={3} justify=\"center\">\r\n        <Grid\r\n          item\r\n          component={Card}\r\n          xs={12}\r\n          md={3}\r\n          className={cx(styles.card, styles.infected)}\r\n        >\r\n          <CardContent>\r\n            {/* //typography -- text in material ui */}\r\n            <Typography color=\"textSecondary\" gutterBottom>\r\n              Infected\r\n            </Typography>\r\n            {/* {confirmed.value } --> gets the values in browser */}\r\n            <Typography variant=\"h6\">\r\n              <CountUp\r\n                start={0}\r\n                end={confirmed.value}\r\n                duration={2.5}\r\n                seperator=\",\"\r\n              />\r\n            </Typography>\r\n            {/* //last update--it is not a human readable so,, to make it we create new DATE */}\r\n            {/* .toDateString ----> human readable format */}\r\n            <Typography color=\"textSecondary\">\r\n              {new Date(lastUpdate).toDateString()}\r\n            </Typography>\r\n            <Typography variant=\"body2\">\r\n              Number of active cases of COVID-19\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n        <Grid\r\n          item\r\n          component={Card}\r\n          xs={12}\r\n          md={3}\r\n          className={cx(styles.card, styles.recovered)}\r\n        >\r\n          <CardContent>\r\n            {/* //typography -- text in material ui */}\r\n            <Typography color=\"textSecondary\" gutterBottom>\r\n              Recovered\r\n            </Typography>\r\n            <Typography variant=\"h6\">\r\n              <CountUp\r\n                start={0}\r\n                end={recovered.value}\r\n                duration={2.5}\r\n                seperator=\",\"\r\n              />\r\n            </Typography>\r\n            <Typography color=\"textSecondary\">\r\n              {new Date(lastUpdate).toDateString()}\r\n            </Typography>\r\n            <Typography variant=\"body2\">\r\n              Number of recoveries of COVID-19\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n        <Grid\r\n          item\r\n          component={Card}\r\n          xs={12}\r\n          md={3}\r\n          className={cx(styles.card, styles.deaths)}\r\n        >\r\n          <CardContent>\r\n            {/* //typography -- text in material ui */}\r\n            <Typography color=\"textSecondary\" gutterBottom>\r\n              deaths\r\n            </Typography>\r\n            <Typography variant=\"h6\">\r\n              <CountUp\r\n                start={0}\r\n                end={deaths.value}\r\n                duration={2.5}\r\n                seperator=\",\"\r\n              />\r\n            </Typography>\r\n            <Typography color=\"textSecondary\">\r\n              {new Date(lastUpdate).toDateString()}\r\n            </Typography>\r\n            <Typography variant=\"body2\">\r\n              Number of deaths of COVID-19\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\nexport default Cards;","export default __webpack_public_path__ + \"static/media/image.9e5d4fc7.png\";","import React from \"react\";\nimport styles from \"./App.Module.css\";\nimport { Cards, Chart, CountryPicker } from \"./components\";\nimport { fetchData } from \"./api/index\";\nimport coronaImage from \"./images/image.png\";\nclass App extends React.Component {\n  state = {\n    data: {},\n    country: \"\",\n  };\n  //fetching data from api though componentDid Mount\n  //updatng data -- > fetchData\n  async componentDidMount() {\n    // const data = await fetchData();\n    const fetchedData = await fetchData();\n    // console.log(data);\n    this.setState({ data: fetchedData });\n  }\n  //method to call country chart\n  handleCountryChange = async (country) => {\n    const fetchedData = await fetchData(country);\n    console.log(fetchedData);\n    this.setState({ data: fetchedData, country: country });\n    //fetch the data\n    //set the date\n  };\n  //we need the fetch data in card component so we are declaring the state\n  render() {\n    //styles.container --> without interfering other css module\n    const { data, country } = this.state;\n    return (\n      <div className={styles.container}>\n        <img className={styles.Image} src={coronaImage} alt=\"covid-19\" />\n        <Cards data={data} />\n\n        <CountryPicker handleCountryChange={this.handleCountryChange} />\n        <Chart data={data} country={country} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}